# -*- coding: utf-8 -*-
"""smartcity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EJwLpRBPneKQtmusbvPodrAVl0hB3Tu2
"""

pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

# ------------------------------
# Load Model & Tokenizer
# ------------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


# ------------------------------
# Helper Functions
# ------------------------------
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response


def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"


def eco_tips_generator(problem_keywords):
    prompt = (
        f"Generate practical and actionable eco-friendly tips for sustainable living "
        f"related to: {problem_keywords}. Provide specific solutions and suggestions:"
    )
    return generate_response(prompt, max_length=1000)


def policy_summarization(pdf_file, policy_text):
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
        summary_prompt = f"Summarize this policy document and extract the most important points:\n\n{content}"
    else:
        summary_prompt = f"Summarize this policy document and extract the most important points:\n\n{policy_text}"
    return generate_response(summary_prompt, max_length=1200)


# ------------------------------
# Gradio App with Purple-Violet Theme
# ------------------------------
with gr.Blocks(css="""
    body {
        background: linear-gradient(135deg, #6a11cb, #2575fc);
    }
    .gradio-container {
        font-family: 'Segoe UI', sans-serif;
    }
    .title {
        text-align: center;
        font-size: 2.5em;
        color: #fff;
        font-weight: bold;
        text-shadow: 2px 2px 6px rgba(0,0,0,0.3);
        margin-top: 10px;
    }
    .subtitle {
        text-align: center;
        font-size: 1.2em;
        color: #e1bee7;
        margin-bottom: 25px;
    }
    button {
        background: linear-gradient(90deg, #8e24aa, #d500f9);
        color: white !important;
        border-radius: 12px;
        font-weight: bold;
        padding: 12px;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    button:hover {
        transform: scale(1.05);
        background: linear-gradient(90deg, #d500f9, #8e24aa);
        box-shadow: 0 6px 12px rgba(0,0,0,0.3);
    }
    textarea, input {
        border-radius: 12px !important;
        border: 2px solid #ba68c8;
        background: #f3e5f5;
        color: #4a148c;
    }
    .card {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 16px;
        padding: 15px;
        box-shadow: 0 6px 12px rgba(0,0,0,0.2);
        margin: 10px;
    }
""") as app:

    # Title
    gr.Markdown("<div class='title'>üíú Eco Assistant & Policy Analyzer</div>")
    gr.Markdown("<div class='subtitle'>AI-powered sustainable solutions with a purple-violet theme</div>")

    with gr.Tabs():
        # ---------------- ECO TIPS TAB ----------------
        with gr.TabItem("üí° Eco Tips Generator"):
            with gr.Row():
                with gr.Column():
                    keywords_input = gr.Textbox(
                        label="üå± Environmental Problem/Keywords",
                        placeholder="e.g., plastic, solar, water waste, energy saving...",
                        lines=3
                    )
                    generate_tips_btn = gr.Button("‚ú® Generate Eco Tips")

                with gr.Column():
                    tips_output = gr.Textbox(label="üåø Sustainable Living Tips", lines=15, elem_classes=["card"])

            generate_tips_btn.click(eco_tips_generator, inputs=keywords_input, outputs=tips_output)

        # ---------------- POLICY TAB ----------------
        with gr.TabItem("üìú Policy Summarization"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="üìÇ Upload Policy PDF", file_types=[".pdf"])
                    policy_text_input = gr.Textbox(
                        label="‚úèÔ∏è Or Paste Policy Text",
                        placeholder="Paste policy document text...",
                        lines=5
                    )
                    summarize_btn = gr.Button("üìñ Summarize Policy")

                with gr.Column():
                    summary_output = gr.Textbox(label="üîë Policy Summary & Key Points", lines=20, elem_classes=["card"])

            summarize_btn.click(policy_summarization, inputs=[pdf_upload, policy_text_input], outputs=summary_output)

# Launch App
app.launch(share=True)